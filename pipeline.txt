pipeline {
    agent any

    parameters {
        choice(name: 'SERVICE', choices: ['all', 'frontend', 'auth-service', 'project-service', 'task-service'])
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '851725608377')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1')
        string(name: 'VERSION', defaultValue: 'latest')
        string(name: 'CLUSTER_NAME', defaultValue: 'main-cluster')
        choice(name: 'TERRAFORM_ACTION', choices: ['none', 'plan', 'apply', 'destroy'])
    }

    tools {
        nodejs 'NodeJS'
    }

    environment {
        DOCKER_BUILDKIT = '1'
        TF_VAR_aws_region = "${params.AWS_REGION}"
        TF_VAR_project_name = "microdevops"
        TF_VAR_environment = "dev"
        GITHUB_REPO = "https://github.com/wassimOubaziz/devops2.git"
        DOCKER_REGISTRY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.${params.AWS_REGION}.amazonaws.com"
        BUILD_VERSION = "${BUILD_NUMBER}"
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: env.GITHUB_REPO
            }
        }

        stage('Terraform') {
            when {
                expression { params.TERRAFORM_ACTION != 'none' }
            }
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                    string(credentialsId: 'aws-token-key', variable: 'AWS_SESSION_TOKEN')
                ]) {
                    dir('terraform') {
                        script {
                            sh """
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws configure set aws_session_token $AWS_SESSION_TOKEN
                            aws configure set region ${params.AWS_REGION}
                            """
                            
                            sh 'terraform init -reconfigure'
                            
                            if (params.TERRAFORM_ACTION == 'plan') {
                                sh 'terraform plan'
                            } else if (params.TERRAFORM_ACTION == 'apply') {
                                sh 'terraform apply -auto-approve'
                            } else if (params.TERRAFORM_ACTION == 'destroy') {
                                sh 'terraform destroy -auto-approve'
                            }
                        }
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh """
                    cd ./frontend
                    npm install --force
                    
                    cd ../backend/services/auth-service
                    npm install --force
                    
                    cd ../project-service
                    npm install --force
                    
                    cd ../task-service
                    npm install --force
                    
                    cd ../../..
                """
            }
        }

        stage('Create ECR Repositories') {
            when {
                expression { params.TERRAFORM_ACTION == 'none' }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'aws-token-key', variable: 'AWS_SESSION_TOKEN')
                    ]) {
                        sh """
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set aws_session_token $AWS_SESSION_TOKEN
                        aws configure set region ${params.AWS_REGION}
                        """

                        def services = []
                        if (params.SERVICE == 'all') {
                            services = ['frontend', 'auth-service', 'project-service', 'task-service']
                        } else {
                            services = [params.SERVICE]
                        }

                        services.each { service ->
                            sh """
                            aws ecr describe-repositories --repository-names ${service} --region ${params.AWS_REGION} || \
                            aws ecr create-repository --repository-name ${service} --region ${params.AWS_REGION}
                            """
                        }
                    }
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'aws-token-key', variable: 'AWS_SESSION_TOKEN')
                    ]) {
                        sh """
                        aws ecr get-login-password --region ${params.AWS_REGION} | docker login --username AWS --password-stdin ${env.DOCKER_REGISTRY}
                        """

                        if (params.SERVICE == 'all' || params.SERVICE == 'frontend') {
                            sh """
                                cd frontend
                                docker build -t frontend:${env.BUILD_VERSION} .
                                docker tag frontend:${env.BUILD_VERSION} ${env.DOCKER_REGISTRY}/frontend:${env.BUILD_VERSION}
                                docker tag frontend:${env.BUILD_VERSION} ${env.DOCKER_REGISTRY}/frontend:latest
                                docker push ${env.DOCKER_REGISTRY}/frontend:${env.BUILD_VERSION}
                                docker push ${env.DOCKER_REGISTRY}/frontend:latest
                                cd ..
                            """
                        }

                        if (params.SERVICE == 'all' || params.SERVICE == 'auth-service') {
                            sh """
                                cd backend/services/auth-service
                                docker build -t auth-service:${env.BUILD_VERSION} .
                                docker tag auth-service:${env.BUILD_VERSION} ${env.DOCKER_REGISTRY}/auth-service:${env.BUILD_VERSION}
                                docker tag auth-service:${env.BUILD_VERSION} ${env.DOCKER_REGISTRY}/auth-service:latest
                                docker push ${env.DOCKER_REGISTRY}/auth-service:${env.BUILD_VERSION}
                                docker push ${env.DOCKER_REGISTRY}/auth-service:latest
                                cd ../../..
                            """
                        }

                        if (params.SERVICE == 'all' || params.SERVICE == 'project-service') {
                            sh """
                                cd backend/services/project-service
                                docker build -t project-service:${env.BUILD_VERSION} .
                                docker tag project-service:${env.BUILD_VERSION} ${env.DOCKER_REGISTRY}/project-service:${env.BUILD_VERSION}
                                docker tag project-service:${env.BUILD_VERSION} ${env.DOCKER_REGISTRY}/project-service:latest
                                docker push ${env.DOCKER_REGISTRY}/project-service:${env.BUILD_VERSION}
                                docker push ${env.DOCKER_REGISTRY}/project-service:latest
                                cd ../../..
                            """
                        }

                        if (params.SERVICE == 'all' || params.SERVICE == 'task-service') {
                            sh """
                                cd backend/services/task-service
                                docker build -t task-service:${env.BUILD_VERSION} .
                                docker tag task-service:${env.BUILD_VERSION} ${env.DOCKER_REGISTRY}/task-service:${env.BUILD_VERSION}
                                docker tag task-service:${env.BUILD_VERSION} ${env.DOCKER_REGISTRY}/task-service:latest
                                docker push ${env.DOCKER_REGISTRY}/task-service:${env.BUILD_VERSION}
                                docker push ${env.DOCKER_REGISTRY}/task-service:latest
                                cd ../../..
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            when {
                expression { params.TERRAFORM_ACTION == 'none' }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'aws-token-key', variable: 'AWS_SESSION_TOKEN')
                    ]) {
                        sh """
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set aws_session_token $AWS_SESSION_TOKEN
                        aws configure set region ${params.AWS_REGION}
                        aws eks --region ${params.AWS_REGION} update-kubeconfig --name ${params.CLUSTER_NAME}
                        """
                        
                        // Apply database secrets first
                        sh """
                        kubectl apply -f k8s/db-secret.yaml || true
                        """

                        // Apply the consolidated manifest file with variable substitution
                        sh """
                        cat k8s/services.yaml | \
                        sed 's/\${AWS_ACCOUNT_ID}/${params.AWS_ACCOUNT_ID}/g' | \
                        sed 's/\${AWS_REGION}/${params.AWS_REGION}/g' | \
                        sed 's/\${BUILD_VERSION}/${env.BUILD_VERSION}/g' | \
                        kubectl apply -f -
                        """
                    }
                }
            }
        }

        stage('Verify Deployment') {
            when {
                expression { params.TERRAFORM_ACTION == 'none' }
            }
            steps {
                script {
                    // Initial status check
                    sh """
                        echo "Current Pods Status:"
                        kubectl get pods -o wide
                        
                        echo "\nCurrent Services Status:"
                        kubectl get svc
                        
                        echo "\nCurrent Deployments Status:"
                        kubectl get deployments
                    """
                    
                    def services = []
                    if (params.SERVICE == 'all') {
                        services = ['frontend', 'auth-service', 'project-service', 'task-service']
                    } else {
                        services = [params.SERVICE]
                    }

                    services.each { service ->
                        try {
                            echo "Checking deployment status for ${service}..."
                            
                            // Wait for deployment
                            def rolloutStatus = sh(script: "kubectl rollout status deployment/${service} --timeout=60s", returnStatus: true)
                            
                            if (rolloutStatus != 0) {
                                echo "Deployment for ${service} failed or timed out. Checking pod logs..."
                                
                                // Get pod names for this service
                                def podNames = sh(script: "kubectl get pods -l app=${service} -o jsonpath='{.items[*].metadata.name}'", returnStdout: true).trim()
                                
                                if (podNames) {
                                    podNames.tokenize().each { podName ->
                                        echo "Logs for pod ${podName}:"
                                        sh "kubectl logs ${podName} --all-containers=true || true"
                                        
                                        echo "Describing pod ${podName}:"
                                        sh "kubectl describe pod ${podName} || true"
                                    }
                                }
                                
                                echo "Describing deployment ${service}:"
                                sh "kubectl describe deployment ${service} || true"
                                
                                // Check events
                                echo "Recent events:"
                                sh "kubectl get events --sort-by='.lastTimestamp' || true"
                                
                                error "Deployment for ${service} failed. Check the logs above for details."
                            } else {
                                echo "Deployment for ${service} succeeded!"
                                
                                // Get service endpoint if it's the frontend
                                if (service == 'frontend') {
                                    echo "Getting frontend service endpoint..."
                                    sh "kubectl get svc frontend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'"
                                }
                            }
                        } catch (Exception e) {
                            echo "Error occurred while verifying ${service} deployment: ${e.message}"
                            throw e
                        }
                    }
                }
            }
        }

        stage('Cleanup') {
            when {
                expression { params.TERRAFORM_ACTION == 'none' }
            }
            steps {
                script {
                    def services = []
                    if (params.SERVICE == 'all') {
                        services = ['frontend', 'auth-service', 'project-service', 'task-service']
                    } else {
                        services = [params.SERVICE]
                    }

                    services.each { service ->
                        sh """
                        docker rmi ${env.DOCKER_REGISTRY}/${service}:${env.BUILD_VERSION} || true
                        docker rmi ${env.DOCKER_REGISTRY}/${service}:latest || true
                        docker rmi ${service}:${env.BUILD_VERSION} || true
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
    }
}