# Define CORS snippet for reuse
map $http_origin $allow_origin {
    default "";
    "~^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$" "$http_origin";
}

server {
    listen 3000;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Enhanced logging for debugging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log combined;

    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header Referrer-Policy strict-origin-when-cross-origin always;

    # Frontend routes
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Static assets with caching
    location /assets/ {
        try_files $uri =404;
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
        access_log off;
    }

    # Enable gzip compression
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_types
        application/javascript
        application/json
        application/xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Common CORS configuration for all API routes
    location /api/ {
        # CORS preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $allow_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Add CORS headers for non-OPTIONS requests
        add_header 'Access-Control-Allow-Origin' $allow_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
    }

    # Common proxy settings
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 8 8k;
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    proxy_next_upstream error timeout http_502 http_503 http_504;

    # Rate limiting settings

    # Auth service
    location /api/auth/ {
        proxy_pass http://auth-service:3001;
        error_page 502 504 = @fallback;
    }

    # Project service
    location /api/projects/ {
        proxy_pass http://project-service:3002;
        error_page 502 504 = @fallback;
    }

    # Task service
    location /api/tasks/ {
        proxy_pass http://task-service:3003;
        error_page 502 504 = @fallback;
    }

    # Fallback location for backend errors
    location @fallback {
        default_type application/json;
        return 502 '{"error": "Backend service temporarily unavailable", "status": 502}';
    }

    # Return JSON for errors
    error_page 400 401 403 404 = @error4xx;
    location @error4xx {
        default_type application/json;
        return 404 '{"error": "Resource not found", "status": 404}';
    }

    error_page 500 502 503 504 = @error5xx;
    location @error5xx {
        default_type application/json;
        return 500 '{"error": "Server error", "status": 500}';
    }
}